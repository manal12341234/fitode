%\VignetteEngine{knitr::knitr}
%\VignetteDepends{fitode}
%\VignetteIndexEntry{Getting started with \texttt{fitode} package}
\documentclass{article}
\title{Getting started with the \texttt{fitode} package}
\author{Sang Woo Park}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{hyperref}
\newcommand{\rzero}{{\cal R}_0}
\newcommand{\code}[1]{{\tt #1}}
\newcommand{\bmb}[1]{{\color{blue} bmb: \emph{#1}}}
\bibliographystyle{chicago}
\date{\today}
\begin{document}
\maketitle

<<opts,echo=FALSE>>=
library("knitr")
opts_chunk$set(fig.width=6,fig.height=4,warning=FALSE)
knit_hooks$set(basefig=function(before, options, envir) {
                   if (before) {
                       par(bty="l",las=1)
                   } else { }
               })
@

\tableofcontents

\pagebreak

\section{Introduction}

\texttt{fitode} is an R package for fitting ordinary differential equations (ODE)
using Maximum Likelihood or Bayesian Markov Chain Monte Carlo (MCMC). It relies on
automatic differentiation features of the \texttt{Deriv} package to solve the
sensitivity equations and use gradient-based optimization algorithms.
\begin{itemize}
    \item response distributions: Gamma, Gaussian, Poisson, and negative
            binomial (NB1 and NB2 parameterization)
    \item link functions on parameters: log, logit, and identity
    \item multiple state fitting
    \item prior/penalization: Beta, Gamma, and Gaussian
    \item confidence intervals on parameters and their transformations via
            delta method, profiling, and importance sampling
\end{itemize}

In order to construct a model in \texttt{fitode} you need to:
\begin{itemize}
    \item specify the gradients using formula notation (e.g., $dX/dt=f(X)$ is
            expressed as \texttt{X$\sim$f(X)})
    \item specify the observation process using formula notation (e.g.,
            \texttt{Xobs$\sim$dnorm(mean=X, sd=sigma)})
    \item specify the initial conditions using formula notation
    \item specify the parameters of the model
    \item specify the link functions (log-link is the default)
\end{itemize}
Then, to fit a model you need to:
\begin{itemize}
    \item specify the data (as well as the time column)
    \item specify the starting values for optimization or MCMC
    \item optionally specify fixed parameters
    \item optionally specify prior distributions (or penalizations); not
            specifying prior distribution in MCMC will result in improper priors on link scales
\end{itemize}
This document was generated using \Sexpr{R.version$version.string} and package versions:
<<pkgversions, echo=FALSE>>=
used.pkgs <- c("bbmle", "Deriv", "deSolve", "fitode")
pkgver <- vapply(sort(used.pkgs),function(x) as.character(packageVersion(x)),"")
print(pkgver,quote=FALSE)
@

\section{Basic fitting - estimating epidemic growth rates}

\subsection{Data}

Here, we study a time series of confirmed cases of Ebola during the 2014 outbreak in
Sierra Leone to characterize epidemic growth patterns. Once you load \texttt{fitode},
the data set (\texttt{SierraLeone2014}) will be automatically loaded to the global
environment.
<<SierraLeonedata, message=FALSE, warning=FALSE>>=
library(fitode)
plot(SierraLeone2014)
@

\subsection{Exponential growth model}

Exponential growth model is the simplest model we can use to characterize the initial
spread of disease:
\begin{equation}
\frac{dX}{dt} = rX.
\end{equation}
This model is parameterized by the initial growth rate $r$ and the initial value $X(0)$.
Variable $X$ describes the dynamics of \emph{mean} confirmed cases;
for simplicity, we can assume that the observed number of confirmed cases at time $t$ follows a
Poisson error distribution with mean $X(t)$. This model can be constructed in \texttt{fitode} as
follows:
<<>>=
exp_model <- new("model.ode",
    name="exponential",
    model=list(
        X ~ r * X
    ),
    observation=list(
        confirmed ~ dpois(lambda= X)
    ),
    initial=list(
        X ~ X0
    ),
    par=c("r", "X0")
)
@

In order to fit this model to the data, we have to specify the initial conditions.
To do so, we can simulate the model for various parameters and try to find a reasonable
parameter set by eyes. For example, here is a parameter set that I found by trial and error:
<<>>=
start <- c(r=7, X0=30)
ss <- simulate(exp_model, parms=start, times=SierraLeone2014$times)
plot(SierraLeone2014)
lines(X ~ times, data=ss)
abline(v=2014.8, col="red", lty=2)
@
Here, I used the \texttt{simulate} function to simulate the model. It requires a
parameter set (\texttt{parms}) and a time vector (\texttt{times}) to run. It also
returns a numerical solution for each state variable as well as simulated observations;
we will ignore the simulated observations for now.

The data does not exhibit exponential growth forever. In order to fit the exponential
model, we have to determine a fitting window. For brevity, we will fit the model from the
beginning of an epidemic to 2014.8.
<<>>=
exp_fit <- fitode(
    model=exp_model,
    data=SierraLeone2014[SierraLeone2014$times <+ 2014.8,],
    start=start
)
@
We can see that the estimated parameters are very close to our initial guess:
<<>>=
exp_fit
@
We can further quantify the uncertainty in the parameters by using \texttt{confint}:
<<>>=
confint(exp_fit)
@
and diagnose the fit by using the \texttt{plot} function:
<<>>=
plot(exp_fit, level=0.95)
@

We can see that the uncertainty of our fit is rather narrow. This is likely to be
driven by our choice of the error function. Poisson distribution assumes that variance
is equal to the mean. Instead, we should use a negative binomial distribution, which
assumes that variance is a quadratic function of the mean. Then, we have to estimate an
extra parameter (\texttt{size} argument of the \texttt{dnbinom}) to account for overdispersion:
<<>>=
exp_model_nbinom <- new("model.ode",
    name="exponential (nbinom)",
    model=list(
        X ~ r * X
    ),
    observation=list(
        confirmed ~ dnbinom(mu=X, size=phi)
    ),
    initial=list(
        X ~ X0
    ),
    par=c("r", "X0", "phi")
)
@
We can fit the model again:
<<>>=
exp_fit_nbinom <- fitode(
    model=exp_model_nbinom,
    data=SierraLeone2014[SierraLeone2014$times <+ 2014.8,],
    start=c(start, phi=10)
)
@
Plot:
<<>>=
plot(exp_fit_nbinom, level=0.95)
@
We can see that our uncertainty is more reasonable. This
increases confidence intervals on parameters as well:
<<>>=
confint(exp_fit_nbinom)
@

\subsection{Logistic growth model}

Exponential growth model accounts for only the initial portion of
the observed data. Instead, we might want to try to model the entire
time series. Note that the cumulative number of cases saturate over time:
<<>>=
plot(cumsum(confirmed) ~ times, data=SierraLeone2014)
@
We can use a logistic model to describe the cumulative number of cases:
\begin{equation}
\frac{dX}{dt} = r X \left(1 - \frac{X}{K}\right).
\end{equation}
While we can fit $X$ directly to cumulative number of cases, it can lead to
overly confident results due to accumulation of observation error.
Instead, we can use \emph{interval counts} to model the number of cases:
$X(t) - X(t - \Delta t)$, where $\Delta t$ is the reporting time step.
This is done by using the \texttt{diffnames} argument
<<>>=
logistic_model <- new("model.ode",
    name="logistic (nbinom)",
    model=list(
        X ~ r * X * (1 - X/K)
    ),
    observation=list(
        confirmed ~ dnbinom(mu=X, size=phi)
    ),
    initial=list(
        X ~ X0
    ),
    diffnames="X",
    par=c("r", "X0", "K", "phi")
)
@

In this case, you need to modify the data set by adding an extra \texttt{NA}
observation before the first observation; this allows \texttt{fitode} to take
the interval difference and still end up with the same number? TODO: need to explain this part
<<>>=
SierraLeone2014b <- rbind(
    c(times=SierraLeone2014$times[1] - diff(SierraLeone2014$times)[1], confirmed=NA),
    SierraLeone2014
)

start_logistic <- c(coef(exp_fit_nbinom), K=sum(SierraLeone2014$confirmed))
start_logistic[["X0"]] <- 300 ## need to use a different value for X0
ss_logistic <- simulate(logistic_model, parms=start_logistic, times=SierraLeone2014b$times)

plot(SierraLeone2014)
lines(X~times, data=ss_logistic)
@
Using this to fit:
<<>>=
logistic_fit <- fitode(
    logistic_model,
    data=SierraLeone2014b,
    start=start_logistic
)
@
Inference:
<<>>=
confint(logistic_fit)
@
Plot:
<<>>=
plot(logistic_fit, level=0.95)
@
Clear bias... likely to be driven by the bias in the fit.

We might want to be smarter about our choices of fitting window:
<<>>=
ma_begin <- 1
ma_end <- which.max(SierraLeone2014b$confirmed) + 1

logistic_fit_ma <- fitode(
    logistic_model,
    data=SierraLeone2014b[ma_begin:ma_end,],
    start=start_logistic
)
@

Much better fit
<<>>=
plot(logistic_fit, level=0.95)
plot(logistic_fit_ma, level=0.95, add=TRUE, col.traj="red", col.conf="red")
@

Inference:
<<>>=
confint(logistic_fit_ma)
@

\subsection{SIR model}

SIR model:
\begin{equation}
\begin{aligned}
\frac{dS}{dt} &= - \beta S \frac{I}{N}\\
\frac{dI}{dt} &= \beta S \frac{I}{N} - \gamma I\\
\frac{dR}{dt} &= \gamma I
\end{aligned}
\end{equation}
We might assume that confirmed cases are quarantined and are no longer infectious.
So we use interval cases again:
<<>>=
SIR_model <- new("model.ode",
    name="SIR (nbinom)",
    model=list(
        S ~ - beta * S * I/N,
        I ~ beta * S * I/N - gamma * I,
        R ~ gamma * I
    ),
    observation=list(
        confirmed ~ dnbinom(mu=R, size=phi)
    ),
    initial=list(
        S ~ N * (1 - i0),
        I ~ N * i0,
        R ~ 0
    ),
    diffnames="R",
    par=c("beta", "gamma", "N", "i0", "phi"),
    link=c(i0="logit")
)
@

Searching for starting values:
<<>>=
SIR_start <- c(beta=70, gamma=60, N=40000, i0=0.0004, phi=6)

ss_SIR <- simulate(SIR_model, parms=SIR_start, times=SierraLeone2014b$times)

plot(SierraLeone2014)
lines(ss_SIR$times, ss_SIR$R)
@

Fit:

<<>>=
SIR_fit <- fitode(
    SIR_model,
    data=SierraLeone2014b,
    start=SIR_start
)
@
Plot and compare:
<<>>=
plot(SIR_fit, level=0.95)
plot(logistic_fit_ma, level=0.95, add=TRUE, col.traj="red", col.conf="red")
@

Doesn't seem good enough? Profiling tells me that that is the best fit...
<<>>=
pp <- profile(SIR_fit, which=1)

@




\end{document}
